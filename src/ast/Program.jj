/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\Program.jj */
/*@egen*//*package ast;*/

options {
               
    KEEP_LINE_COLUMN = false;
  }
  
  PARSER_BEGIN(Program)
  
  public class Program/*@bgen(jjtree)*/implements ProgramTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTProgramState jjtree = new JJTProgramState();

/*@egen*/
  
    public static void main(String args[]) {
        Program ast = new Program(System.in);
      try {
        SimpleNode node = ast.Start(); /* Create instance of SimpleNode and use Start to
                                       * parse input text and construct AST */
  
        /* create the visitor and traverse the tree with it*/
  
        node.dump(""); /* Recursively prints text of the AST to terminal starting from root */
        System.out.println("Process Successful.");
      } catch (Exception e) {
        System.out.println("Unidentified Input.");
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }
  }
  
  PARSER_END(Program)
  
  
  /* WHITE SPACE */
  SKIP : {    " " | "\t" | "\r" | "\n" }
  
  /* COMMENTS */
  SKIP :
  {
      "//"
  |   <"//" (~["\n","\r"])*>
  |   <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
  }
  
  TOKEN :
  {
    < ABSTRACT: "abstract" >
  | < BOOLEAN: "boolean" >
  | < INSTANCE_INIT: "instance_init" >
  | < BREAK: "break" >
  | < BYTE: "byte" >
  | < CASE: "case" >
  | < CATCH: "catch" >
  | < CHAR: "char" >
  | < CLASS: "class" >
  | < CONST: "const" >
  | < CONTINUE: "continue" >
  | < _DEFAULT: "default" >
  | < DO: "do" >
  | < DOUBLE: "double" >
  | < ELSE: "else" >
  | < EXTENDS: "extends" >
  | < FALSE: "false" >
  | < FINAL: "final" >
  | < FINALLY: "finally" >
  | < FLOAT: "float" >
  | < FOR: "for" >
  | < GOTO: "goto" >
  | < IF: "if" >
  | <IFELSE: "ifelse">
  | < IMPLEMENTS: "implements" >
  | < IMPORT: "import" >
  | < INSTANCEOF: "instanceof" >
  | < INT: "int" >
  | < INTERFACE: "interface" >
  | < LONG: "long" >
  | < NATIVE: "native" >
  | < NEW: "new" >
  | < NULL: "null" >
  | < PACKAGE: "package">
  | < PRIVATE: "private" >
  | < PROTECTED: "protected" >
  | < PUBLIC: "public" >
  | < RETURN: "return" >
  | < SHORT: "short" >
  | < STATIC: "static" >
  | < SUPER: "super" >
  | < SWITCH: "switch" >
  | < SYNCHRONIZED: "synchronized" >
  | < THIS: "this" >
  | < THROW: "throw" >
  | < THROWS: "throws" >
  | < TRANSIENT: "transient" >
  | < TRUE: "true" >
  | < TRY: "try" >
  | < VOID: "void" >
  | < VOLATILE: "volatile" >
  | < WHILE: "while" >
  | < STRICTFP: "strictfp" >
  }

  /*SEPARATORS*/
TOKEN : {
    < LBRACKET: "[" >
  | < RBRACKET: "]" >
  | < COMMA: "," >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < SEMICOLON: ";" >
  | < DOT: "." >
  }
  
  TOKEN : {
    < STRING: "\"" (~["\""])* "\"" >
  | < ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9","_"])* >
  | < DIGIT: ["0"-"9"] >
  | < REAL: (["0"-"9"])+ ("." (["0"-"9"])+)? >
  }
  
  /* Following method parses an expression and traverses AST and returns to root node.
   * prints AST to terminal.
   */
  SimpleNode Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  }
  
  void ConditionalExpression()       : {}
  {
   ConditionalOrExpression() [ "?" Expression() ":" ConditionalOrExpression() ]
  }
  
  void ConditionalOrExpression()       : {}
  {/*@bgen(jjtree) #Or(> 1) */
  {
    ASTOr jjtn001 = new ASTOr(JJTOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
  ConditionalAndExpression() ("||" ConditionalAndExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/        
  }
  
  void ConditionalAndExpression()       : {}
  {/*@bgen(jjtree) #And(> 1) */
  {
    ASTAnd jjtn001 = new ASTAnd(JJTAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
  InclusiveOrExpression() ("&&" InclusiveOrExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/         
  }
  
  void InclusiveOrExpression()       :
  {}
  {/*@bgen(jjtree) #BitOr(> 1) */
  {
    ASTBitOr jjtn001 = new ASTBitOr(JJTBITOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    ExclusiveOrExpression() ("|" ExclusiveOrExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/           
  }
  
  void ExclusiveOrExpression()       :
  {}
  {/*@bgen(jjtree) #BitXor(> 1) */
  {
    ASTBitXor jjtn001 = new ASTBitXor(JJTBITXOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    AndExpression() ("^" AndExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/            
  }
  
  void AndExpression()       :
  {}
  {/*@bgen(jjtree) #BitAnd(> 1) */
  {
    ASTBitAnd jjtn001 = new ASTBitAnd(JJTBITAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    EqExpression() ("&" EqExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/            
  }
  
  void EqExpression()       :
  {}
  {/*@bgen(jjtree) #Equal(> 1) */
  {
    ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/           
  }
  
  void RelationalExpression()       :
  {}
  {/*@bgen(jjtree) #Relational(> 1) */
  {
    ASTRelational jjtn001 = new ASTRelational(JJTRELATIONAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    ShiftExpression() ( LOOKAHEAD(2) ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/                
  }
  
  void ShiftExpression()       :
  {}
  {/*@bgen(jjtree) #Shift(> 1) */
  {
    ASTShift jjtn001 = new ASTShift(JJTSHIFT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    AddExpression() ( LOOKAHEAD(2) ( "<<" | ">>" | ">>>") AddExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/           
  }
  
  void AddExpression()       : {}
  {/*@bgen(jjtree) #Add(> 1) */
  {
    ASTAdd jjtn001 = new ASTAdd(JJTADD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/         
  }
  
  void MultiplicativeExpression()       : {}
  {/*@bgen(jjtree) #Mult(> 1) */
  {
    ASTMult jjtn001 = new ASTMult(JJTMULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/          
  }
  
  void UnaryExpression()       : {}
  {
    "(" Expression() ")" | UnaryExpressionNotPlusMinus() |Identifier() | Integer()
  }
  
  void UnaryExpressionNotPlusMinus()       : {}
  {/*@bgen(jjtree) Unary */
  {
    ASTUnary jjtn001 = new ASTUnary(JJTUNARY);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
  ("~" | "!")UnaryExpression() | PreIncrementExpression() | PreDecrementExpression()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       
  }
  
  void PreIncrementExpression()        : {}
  {/*@bgen(jjtree) PreIncrement */
  {
    ASTPreIncrement jjtn001 = new ASTPreIncrement(JJTPREINCREMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
  "++" UnaryExpression()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              
  }
  
  void PreDecrementExpression()       : {}
  {/*@bgen(jjtree) PreDecrement */
  {
    ASTPreDecrement jjtn001 = new ASTPreDecrement(JJTPREDECREMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
  "--" UnaryExpression()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              
  }
  
  /*** INTEGER AND IDENTIFIER BUILD NODES FOR IDENTIFIER AND INTEGER LITERALS */
  void Identifier() :
  {/*@bgen(jjtree) Identifier */
      ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
      boolean jjtc000 = true;
      jjtree.openNodeScope(jjtn000);
/*@egen*/
      Token t;
  }
  {/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t = <ID>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  }
  
  void Integer()          : {/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) Integer */
    try {
/*@egen*/
    <DIGIT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }
  
  void Expression()       : {}
  {
    ConditionalExpression()
  }
  